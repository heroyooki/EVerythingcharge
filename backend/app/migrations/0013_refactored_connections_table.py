"""refactored_connections_table

Revision ID: 0013
Revises: 0012
Create Date: 2024-12-06 10:48:59.631332

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '0013'
down_revision = '0012'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('evses',
    sa.Column('id', sa.SmallInteger(), nullable=False),
    sa.Column('custom_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('charge_point_id', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['charge_point_id'], ['charge_points.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.add_column('charge_points', sa.Column('vendor_name', sa.String(), nullable=False))
    op.add_column('charge_points', sa.Column('firmware_version', sa.String(), nullable=True))
    op.alter_column('charge_points', 'model',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.drop_column('charge_points', 'description')
    op.drop_column('charge_points', 'vendor')
    op.add_column('connections', sa.Column('reason', sa.String(), nullable=True))
    op.add_column('connections', sa.Column('custom_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('connections', sa.Column('master_id', sa.String(), nullable=False))
    op.drop_constraint('connections_charge_point_id_fkey', 'connections', type_='foreignkey')
    op.drop_column('connections', 'error_code')
    op.drop_column('connections', 'charge_point_id')
    op.add_column('connectors', sa.Column('reason', sa.String(), nullable=True))
    op.add_column('connectors', sa.Column('custom_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('connectors', sa.Column('evse_id', sa.SmallInteger(), nullable=False))
    op.drop_constraint('connectors_charge_point_id_fkey', 'connectors', type_='foreignkey')
    op.create_foreign_key(None, 'connectors', 'evses', ['evse_id'], ['id'], ondelete='CASCADE')
    op.drop_column('connectors', 'error_code')
    op.drop_column('connectors', 'charge_point_id')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('connectors', sa.Column('charge_point_id', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('connectors', sa.Column('error_code', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'connectors', type_='foreignkey')
    op.create_foreign_key('connectors_charge_point_id_fkey', 'connectors', 'charge_points', ['charge_point_id'], ['id'], ondelete='CASCADE')
    op.drop_column('connectors', 'evse_id')
    op.drop_column('connectors', 'custom_data')
    op.drop_column('connectors', 'reason')
    op.add_column('connections', sa.Column('charge_point_id', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('connections', sa.Column('error_code', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.create_foreign_key('connections_charge_point_id_fkey', 'connections', 'charge_points', ['charge_point_id'], ['id'], ondelete='CASCADE')
    op.drop_column('connections', 'master_id')
    op.drop_column('connections', 'custom_data')
    op.drop_column('connections', 'reason')
    op.add_column('charge_points', sa.Column('vendor', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('charge_points', sa.Column('description', sa.VARCHAR(length=124), autoincrement=False, nullable=True))
    op.alter_column('charge_points', 'model',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.drop_column('charge_points', 'firmware_version')
    op.drop_column('charge_points', 'vendor_name')
    op.drop_table('evses')
    # ### end Alembic commands ###
